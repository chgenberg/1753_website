// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String
  firstName             String
  lastName              String
  phone                 String?
  dateOfBirth          DateTime?
  avatar                String?
  isEmailVerified      Boolean  @default(false)
  emailVerificationToken String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  lastLogin            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // User preferences
  language             String   @default("sv") // sv, en, es
  newsletter           Boolean  @default(false)
  skinType             String?  // dry, oily, combination, sensitive, normal, acne, mature
  skinConcerns         String[] // Array of strings
  emailNotifications   Boolean  @default(true)
  smsNotifications     Boolean  @default(false)
  orderUpdates         Boolean  @default(true)
  skinJourneyReminders Boolean  @default(true)

  // Relations
  orders               Order[]
  reviews              Review[]
  addresses            Address[]
  skinJourneyEntries   SkinJourneyEntry[]
  progressReports      ProgressReport[]
  learningProgress     LearningProgress[]
  videoWatchHistory    VideoWatchHistory[]
  expertConsultations  ExpertConsultation[]
  personalizedSuggestions PersonalizedSuggestion[]
  subscriptions        Subscription[]
  
  @@map("users")
}

// Enhanced Skin Journey Entry
model SkinJourneyEntry {
  id                String   @id @default(cuid())
  userId            String
  date              DateTime @default(now())
  skinCondition     Int      // 1-10 rating
  notes             String?
  photos            String[] // Array of photo URLs
  photoType         String   // before, progress, after
  
  // Enhanced tracking
  mood              Int?     // 1-10 how user feels about skin
  productSatisfaction Int?   // 1-10 satisfaction with current products
  lifestyle         Json?    // sleep, stress, diet, exercise data
  weather           String?  // weather conditions
  season            String?  // spring, summer, autumn, winter
  menstrualCycle    String?  // for hormonal tracking
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("skin_journey_entries")
}

// Progress Reports (AI-generated monthly summaries)
model ProgressReport {
  id                String   @id @default(cuid())
  userId            String
  month             String   // YYYY-MM format
  
  // AI-generated insights
  overallProgress   Float    // -10 to 10 scale
  keyInsights       String[] // AI-generated insights
  improvements      String[] // What got better
  concerns          String[] // What needs attention
  recommendations   String[] // Personalized recommendations
  
  // Statistics
  averageSkinCondition Float
  moodTrend         Float    // Mood improvement/decline
  consistencyScore  Float    // How consistent user was with routine
  
  // Generated content
  summaryText       String   // AI-generated summary
  achievements      String[] // User achievements this month
  nextMonthGoals    String[] // Suggested goals
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, month])
  @@map("progress_reports")
}

// Dynamic Product Suggestions
model PersonalizedSuggestion {
  id              String   @id @default(cuid())
  userId          String
  type            String   // product, routine, lifestyle, seasonal
  
  // Suggestion content
  title           String
  description     String
  reason          String   // Why this suggestion was made
  urgency         String   // low, medium, high
  category        String   // skincare, lifestyle, nutrition, etc.
  
  // Targeting
  triggers        String[] // What triggered this suggestion
  seasonalFactor  String?  // If seasonal
  weatherFactor   String?  // If weather-based
  skinDataFactor  Json?    // Based on skin journey data
  
  // Product recommendations (if type = product)
  productIds      String[] // Array of product IDs
  routineSteps    Json?    // Specific routine recommendations
  
  // Engagement
  isRead          Boolean  @default(false)
  isAccepted      Boolean  @default(false)
  isHidden        Boolean  @default(false)
  rating          Int?     // 1-5 how helpful was this suggestion
  
  // Validity
  validFrom       DateTime @default(now())
  validUntil      DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("personalized_suggestions")
}

// Knowledge Center - Educational Content
model EducationalContent {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  
  // Content
  content         String   // Rich text/markdown content
  excerpt         String?  // Short description
  
  // Categorization
  category        String   // skincare-basics, ingredients, routines, problems, etc.
  skinTypes       String[] // Which skin types this applies to
  skinConcerns    String[] // Which skin concerns this addresses
  difficulty      String   // beginner, intermediate, advanced
  readTime        Int      // Estimated read time in minutes
  
  // Media
  featuredImage   String?
  images          String[] // Additional images
  
  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  
  // Status
  isPublished     Boolean  @default(false)
  publishedAt     DateTime?
  
  // Author info
  authorName      String?
  authorTitle     String?  // Dermatologist, Skin Expert, etc.
  authorImage     String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  learningProgress LearningProgress[]
  ingredients     IngredientInfo[]
  translations    EducationalContentTranslation[]
  
  @@map("educational_content")
}

model EducationalContentTranslation {
  id              String   @id @default(cuid())
  contentId       String
  locale          String
  title           String?
  content         String?
  excerpt         String?
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  contentRef      EducationalContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  @@unique([contentId, locale])
  @@map("educational_content_translations")
}

// User Learning Progress
model LearningProgress {
  id              String   @id @default(cuid())
  userId          String
  contentId       String
  
  // Progress tracking
  status          String   // not_started, in_progress, completed
  progressPercent Int      @default(0) // 0-100
  timeSpent       Int      @default(0) // Time in seconds
  
  // Engagement
  rating          Int?     // 1-5 how helpful
  feedback        String?  // User feedback
  bookmarked      Boolean  @default(false)
  
  // Timestamps
  startedAt       DateTime?
  completedAt     DateTime?
  lastAccessedAt  DateTime @default(now())
  createdAt       DateTime @default(now())

  // Relations
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  content         EducationalContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, contentId])
  @@map("learning_progress")
}

// Video Guides
model VideoGuide {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  
  // Video content
  videoUrl        String   // YouTube, Vimeo, or hosted URL
  thumbnailUrl    String?
  duration        Int      // Duration in seconds
  transcript      String?  // Video transcript
  
  // Content details
  description     String
  category        String   // product-usage, routine, technique, etc.
  difficulty      String   // beginner, intermediate, advanced
  
  // Targeting
  skinTypes       String[] // Which skin types this applies to
  skinConcerns    String[] // Which skin concerns this addresses
  productIds      String[] // Related products
  
  // Instructor
  instructorName  String
  instructorTitle String?  // Skin Expert, Brand Ambassador, etc.
  instructorImage String?
  
  // SEO & Discovery
  keywords        String[]
  isPublished     Boolean  @default(false)
  publishedAt     DateTime?
  viewCount       Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  watchHistory    VideoWatchHistory[]
  
  @@map("video_guides")
}

// Video Watch History
model VideoWatchHistory {
  id              String   @id @default(cuid())
  userId          String
  videoId         String
  
  // Watch progress
  watchedDuration Int      @default(0) // Seconds watched
  completed       Boolean  @default(false)
  
  // Engagement
  rating          Int?     // 1-5 stars
  feedback        String?
  bookmarked      Boolean  @default(false)
  
  // Timestamps
  firstWatchedAt  DateTime @default(now())
  lastWatchedAt   DateTime @default(now())
  createdAt       DateTime @default(now())

  // Relations
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  video           VideoGuide @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@unique([userId, videoId])
  @@map("video_watch_history")
}

// Expert Consultations
model ExpertConsultation {
  id              String   @id @default(cuid())
  userId          String
  
  // Expert info
  expertName      String
  expertTitle     String   // Dermatologist, Esthetician, etc.
  expertImage     String?
  expertBio       String?
  
  // Consultation details
  type            String   // chat, video, phone
  status          String   // requested, scheduled, completed, cancelled
  duration        Int?     // Duration in minutes
  
  // Scheduling
  requestedAt     DateTime @default(now())
  scheduledFor    DateTime?
  completedAt     DateTime?
  
  // Content
  userQuestions   String[] // Questions user submitted
  expertAdvice    String?  // Expert's advice/response
  followUpTasks   String[] // Recommended actions
  
  // Satisfaction
  userRating      Int?     // 1-5 stars
  userFeedback    String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("expert_consultations")
}

// Ingredient Encyclopedia
model IngredientInfo {
  id              String   @id @default(cuid())
  name            String   @unique
  slug            String   @unique
  
  // Basic info
  displayName     String   // User-friendly name
  scientificName  String?  // Chemical/INCI name
  category        String   // active, moisturizer, antioxidant, etc.
  
  // Content
  description     String   // Detailed description
  benefits        String[] // Array of benefits
  suitableFor     String[] // Skin types/concerns
  notSuitableFor  String[] // Contraindications
  
  // Usage
  concentration   String?  // Typical concentration range
  pHRange         String?  // Optimal pH range
  timeOfDay       String?  // morning, evening, both
  frequency       String?  // daily, weekly, as needed
  
  // Interactions
  worksWellWith   String[] // Ingredient names that pair well
  avoidWith       String[] // Ingredients to avoid mixing
  
  // Safety
  safetyRating    String   // low-risk, medium-risk, high-risk
  pregnancySafe   Boolean  @default(true)
  sensitivityRisk String   // low, medium, high
  
  // Research
  evidenceLevel   String   // strong, moderate, limited
  studyLinks      String[] // Links to research
  
  // Media
  image           String?
  
  // SEO
  metaDescription String?
  keywords        String[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  products        Product[] @relation("ProductIngredients")
  educationalContent EducationalContent[]
  translations    IngredientInfoTranslation[]
  
  @@map("ingredient_info")
}

// Address model (separated from User for better normalization)
model Address {
  id          String  @id @default(cuid())
  userId      String
  type        String  // shipping, billing
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  province    String
  postalCode  String
  country     String  @default("SE")
  phone       String?
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

// Product model (enhanced)
model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String?
  shortDescription String?
  price         Float
  compareAtPrice Float?
  sku           String?  @unique
  barcode       String?
  weight        Float?
  dimensions    Json?    // {length, width, height}
  category      String?
  tags          String[]
  images        Json[]   // Array of image objects
  variants      Json[]   // Array of variant objects
  inventory     Int      @default(0)
  trackInventory Boolean @default(true)
  allowBackorder Boolean @default(false)
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  metaTitle     String?
  metaDescription String?
  seoKeywords   String[]
  
  // Enhanced product info
  keyIngredients String[] // Main ingredients
  howToUse      String?   // Usage instructions
  skinTypes     String[]  // Suitable skin types
  skinConcerns  String[]  // Addresses these concerns
  timeOfDay     String?   // morning, evening, both
  
  // Detailed content from 1753-products-blocks.txt
  longDescription String? @db.Text // Rich detailed description
  benefitsDetails Json?   // Structured benefits information
  ingredientsDetails Json? // Detailed ingredient information with concentrations
  imagesData      Json?   // Detailed image data with alt texts and positions
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  orderItems    OrderItem[]
  reviews       Review[]
  discounts     ProductDiscount[]
  ingredients   IngredientInfo[] @relation("ProductIngredients")
  translations  ProductTranslation[]
  subscriptionAddOns SubscriptionAddOn[]
  
  @@map("products")
}

// Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  email           String
  phone           String?
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Totals
  subtotal        Float
  taxAmount       Float       @default(0)
  shippingAmount  Float       @default(0)
  discountAmount  Float       @default(0)
  totalBeforeDiscount Float?  // Original total before any discounts
  totalDiscount   Float       @default(0) // Total amount discounted
  totalAmount     Float
  currency        String      @default("SEK")
  
  // Addresses (stored as JSON for flexibility)
  shippingAddress Json
  billingAddress  Json
  
  // Payment info
  paymentMethod   String?
  paymentReference String?
  paymentOrderCode String?
  transactionId   String?
  customerName    String?
  customerPhone   String?
  
  // Fulfillment
  trackingNumber  String?
  trackingCompany String?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  
  // Notes
  customerNotes  String?
  internalNotes  String?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user           User?     @relation(fields: [userId], references: [id])
  items          OrderItem[]
  discounts      OrderDiscount[] // Track applied discount codes
  
  @@map("orders")
}

// Order items (normalized)
model OrderItem {
  id          String @id @default(cuid())
  orderId     String
  productId   String
  variantId   String?
  quantity    Int
  price       Float
  title       String
  variantTitle String?
  sku         String?
  createdAt   DateTime @default(now())

  // Relations
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Review model (enhanced)
model Review {
  id                String      @id @default(cuid())
  productId         String
  userId            String?
  orderId           String?
  rating            Int         // 1-5 stars
  title             String
  body              String
  reviewerName      String
  reviewerEmail     String
  reviewerLocation  String?
  isVerified        Boolean     @default(false)
  isVerifiedPurchase Boolean    @default(false)
  photos            Json[]      // Array of photo objects
  helpfulVotes      Int         @default(0)
  reportedCount     Int         @default(0)
  status            ReviewStatus @default(PENDING)
  moderatorNotes    String?
  source            String?     // judge.me_csv, judge.me_api, website
  externalId        String?     // Original Judge.me ID
  
  // Skincare-specific metadata
  skinType          String?
  ageRange          String?
  usageDuration     String?
  skinConcerns      String[]
  
  // Drip integration
  dripSubscriberId  String?
  dripCampaignId    String?
  dripWorkflowTriggered Boolean @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user              User?    @relation(fields: [userId], references: [id])
  replies           ReviewReply[]
  
  @@map("reviews")
}

// Review replies (normalized)
model ReviewReply {
  id          String      @id @default(cuid())
  reviewId    String
  authorType  ReplyAuthorType
  authorName  String
  body        String
  createdAt   DateTime    @default(now())

  // Relations
  review      Review      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  @@map("review_replies")
}

// Discount model
model Discount {
  id              String        @id @default(cuid())
  code            String        @unique
  title           String
  description     String?
  type            DiscountType  // percentage, fixed_amount, free_shipping
  value           Float
  minimumAmount   Float?
  usageLimit      Int?
  usageCount      Int           @default(0)
  isActive        Boolean       @default(true)
  startsAt        DateTime?
  endsAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  products        ProductDiscount[]
  
  @@map("discounts")
}

// Product-Discount junction table
model ProductDiscount {
  id          String    @id @default(cuid())
  productId   String
  discountId  String
  createdAt   DateTime  @default(now())

  // Relations
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount    Discount  @relation(fields: [discountId], references: [id], onDelete: Cascade)
  
  @@unique([productId, discountId])
  @@map("product_discounts")
}

// Newsletter subscribers (separate from users for non-customers)
model NewsletterSubscriber {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String?
  lastName      String?
  skinType      String?
  skinConcerns  String[]
  interests     String[]
  source        String?  // website, checkout, quiz, blog
  isActive      Boolean  @default(true)
  
  // Drip integration
  dripSubscriberId String?
  dripTags         String[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("newsletter_subscribers")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  HIDDEN
}

enum ReplyAuthorType {
  CUSTOMER
  ADMIN
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model StoreReview {
  id        Int          @id @default(autoincrement())
  rating    Int
  title     String
  body      String
  author    String
  email     String
  status    ReviewStatus @default(APPROVED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model BlogPost {
  id            Int      @id @default(autoincrement())
  slug          String   @unique
  title         String
  content       String   @db.Text
  author        String?
  image         String?  // Main image for blog post
  thumbnail     String?  // Thumbnail for blog list
  published     Boolean  @default(false)
  publishedAt   DateTime?
  metaTitle     String?
  metaDescription String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  translations  BlogPostTranslation[]
}

model BlogPostTranslation {
  id          String   @id @default(cuid())
  postId      Int
  locale      String
  title       String?
  content     String?
  excerpt     String?
  metaTitle   String?
  metaDescription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  post        BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([postId, locale])
  @@map("blog_post_translations")
}

// Raw Material model for functional foods and ingredients
model RawMaterial {
  id               String   @id @default(cuid())
  name             String   @unique
  swedishName      String   
  origin           String   // Nordisk, Asiatisk, Global, etc.
  category         String   // berry, vegetable, herb, fermented, etc.
  
  // Health effects
  healthBenefits   String[] // Array of health benefits
  description      String   @db.Text // Detailed description
  nutrients        String[] // Key nutrients/compounds
  
  // Usage information
  howToUse         String?  @db.Text
  dosage           String?
  precautions      String?  @db.Text
  
  // SEO and display
  slug             String   @unique
  metaTitle        String?
  metaDescription  String?
  thumbnail        String?  // Image URL
  
  // Scientific backing
  references       String[] // Scientific references
  studies          String[] // Specific studies mentioned
  
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  translations     RawMaterialTranslation[]
  
  @@map("raw_materials")
}

model RawMaterialTranslation {
  id               String   @id @default(cuid())
  rawMaterialId    String
  locale           String
  name             String?
  description      String?
  healthBenefits   String[]
  nutrients        String[]
  metaTitle        String?
  metaDescription  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  rawMaterial      RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)
  @@unique([rawMaterialId, locale])
  @@map("raw_material_translations")
}

// Contact form submissions for learning customer patterns
model ContactSubmission {
  id          String   @id @default(cuid())
  name        String
  email       String
  subject     String
  message     String   @db.Text
  
  // Metadata for analysis
  userAgent   String?  // Browser/device info
  ipAddress   String?  // For geographic analysis
  referrer    String?  // Where they came from
  
  // Status tracking
  status      String   @default("new")  // new, read, replied, resolved
  category    String?  // Auto-categorized: product_question, order_issue, general, etc.
  priority    String   @default("normal") // low, normal, high, urgent
  
  // Response tracking
  respondedAt DateTime?
  respondedBy String?  // Who responded
  responseTime Int?    // Minutes to first response
  
  // Analytics
  sessionData Json?    // Store additional session/tracking data
  tags        String[] // For categorization and analysis
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("contact_submissions")
  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@index([category])
}

// Discount codes for promotional campaigns
model DiscountCode {
  id               String   @id @default(cuid())
  code             String   @unique // The discount code (e.g., "WELCOME20")
  name             String   // Internal name/description
  description      String?  // Public description for customers
  
  // Discount configuration
  type             String   // "percentage" or "fixed_amount"
  value            Float    // Percentage (0-100) or fixed amount in SEK
  minimumOrderAmount Float? // Minimum order value to use code
  maximumDiscount  Float?   // Maximum discount amount for percentage codes
  
  // Product restrictions
  applicableToAll  Boolean  @default(true)
  productIds       String[] // Empty array = all products, otherwise specific product IDs
  excludeProductIds String[] // Products that are excluded from discount
  categoryRestrictions String[] // Product categories this applies to
  
  // Usage limits
  usageLimit       Int?     // Total times code can be used (null = unlimited)
  usageCount       Int      @default(0) // How many times it's been used
  perCustomerLimit Int?     // Max uses per customer (null = unlimited)
  
  // Time constraints
  validFrom        DateTime @default(now())
  validUntil       DateTime?
  
  // Customer restrictions
  firstTimeCustomersOnly Boolean @default(false)
  minCustomerSpend Float?  // Minimum historical customer spend
  
  // Status and metadata
  isActive         Boolean  @default(true)
  isPublic         Boolean  @default(true) // Whether customers can see this code
  priority         Int      @default(0)    // Higher priority codes applied first
  
  // Campaign tracking
  campaignId       String?  // Link to marketing campaign
  source           String?  // Where this code was distributed
  
  // Admin fields
  createdBy        String?  // Admin who created the code
  notes            String?  // Internal notes
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  orderDiscounts   OrderDiscount[]
  
  @@map("discount_codes")
  @@index([code])
  @@index([isActive])
  @@index([validFrom, validUntil])
  @@index([type])
}

// Track discount usage per order
model OrderDiscount {
  id               String   @id @default(cuid())
  orderId          String
  discountCodeId   String
  discountCode     String   // Store the actual code used
  discountAmount   Float    // Amount discounted
  originalAmount   Float    // Order amount before discount
  
  createdAt        DateTime @default(now())
  
  // Relations
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discount         DiscountCode @relation(fields: [discountCodeId], references: [id])
  
  @@map("order_discounts")
  @@index([orderId])
  @@index([discountCodeId])
}

// Add discount tracking to Order model
// Note: This would require updating the existing Order model to include:
// discounts        OrderDiscount[]
// totalBeforeDiscount Float?
// totalDiscount    Float    @default(0)

// Quiz Submission model
model QuizSubmission {
  id          String   @id @default(cuid())
  email       String
  name        String
  gender      String
  age         Int
  answers     String   @db.Text // JSON string of all quiz answers
  
  // Analysis results (if generated)
  results     String?  @db.Text // JSON string of AI-generated results
  
  // Tracking
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("quiz_submissions")
  @@index([email])
  @@index([createdAt])
}

// New: Product translations
model ProductTranslation {
  id            String   @id @default(cuid())
  productId     String
  locale        String
  name          String?
  description   String?
  longDescription String?
  metaTitle     String?
  metaDescription String?
  howToUse      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@unique([productId, locale])
  @@map("product_translations")
}

// New: Ingredient translations
model IngredientInfoTranslation {
  id              String   @id @default(cuid())
  ingredientId    String
  locale          String
  displayName     String?
  description     String?
  benefits        String[]
  suitableFor     String[]
  notSuitableFor  String[]
  concentration   String?
  pHRange         String?
  timeOfDay       String?
  frequency       String?
  worksWellWith   String[]
  avoidWith       String[]
  metaDescription String?
  keywords        String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ingredient      IngredientInfo @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  @@unique([ingredientId, locale])
  @@map("ingredient_translations")
}

// Subscription models for SaaS service
model SubscriptionPlan {
  id                String   @id @default(cuid())
  name              String
  description       String?
  price             Float
  currency          String   @default("SEK")
  interval          String   // monthly, quarterly, yearly
  intervalCount     Int      @default(1)
  trialDays         Int?     @default(0)
  features          Json?    // Array of features included
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  subscriptions     Subscription[]
  
  @@map("subscription_plans")
}

model Subscription {
  id                    String              @id @default(cuid())
  userId                String
  planId                String
  status                SubscriptionStatus
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  trialStart            DateTime?
  trialEnd              DateTime?
  canceledAt            DateTime?
  cancelAtPeriodEnd     Boolean             @default(false)
  vivaCustomerToken     String?             // Viva Wallet customer token
  vivaPaymentMethodId   String?             // Viva Wallet payment method ID
  
  // New pause functionality
  pausedAt              DateTime?
  pausedUntil           DateTime?
  pauseReason           String?
  
  // Frequency modification
  customInterval        String?             // Override plan interval: monthly, quarterly, yearly
  customIntervalCount   Int?                // Override plan interval count
  
  metadata              Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                  SubscriptionPlan    @relation(fields: [planId], references: [id])
  invoices              Invoice[]
  usageRecords          UsageRecord[]
  addOnOrders           SubscriptionAddOn[]

  @@map("subscriptions")
}

model Invoice {
  id                String        @id @default(cuid())
  subscriptionId    String
  amount            Float
  currency          String        @default("SEK")
  status            InvoiceStatus @default(PENDING)
  dueDate           DateTime
  paidAt            DateTime?
  vivaOrderId       String?       // Viva Wallet order ID
  vivaPaymentId     String?       // Viva Wallet payment ID
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  subscription      Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model UsageRecord {
  id             String       @id @default(cuid())
  subscriptionId String
  feature        String       // e.g., "api_calls", "storage_gb", "consultations"
  quantity       Int
  recordedAt     DateTime     @default(now())
  metadata       Json?

  // Relations
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAUSED
}

// Subscription add-on orders (extra products with subscriber discount)
model SubscriptionAddOn {
  id                String              @id @default(cuid())
  subscriptionId    String
  productId         String
  quantity          Int                 @default(1)
  originalPrice     Float               // Original product price
  discountPercent   Float               // Subscriber discount percentage
  finalPrice        Float               // Price after discount
  status            AddOnOrderStatus    @default(PENDING)
  orderedAt         DateTime            @default(now())
  shippedAt         DateTime?
  deliveredAt       DateTime?
  
  // Relations
  subscription      Subscription        @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  product           Product             @relation(fields: [productId], references: [id])
  
  @@map("subscription_addons")
}

enum AddOnOrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  CANCELED
}
